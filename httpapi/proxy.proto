syntax = "proto3";
package httpapi;

option go_package = "github.com/LLKennedy/httpgrpc/httpapi";

// ExposedService is a microservice exposed to the outside world via an HTTPS reverse-proxy
service ExposedService {
    // ProxyUnary sends a message to the GRPC API expecting an immediate single response
    rpc ProxyUnary(Request) returns (Response) {}
    // ProxyStream handles streamed requests and responses from websockets
    rpc ProxyStream(stream StreamedRequest) returns (stream StreamedResponse) {}
}

message StreamedRequest {
    oneof message_type {
        // Init will only be sent once on initialisation of the websocket that this stream is linked to, it contains the routing information normally transmitted by the Request message
        RoutingInformation init = 1;
        // Request will be sent for every message but the very first, and is the JSON extracted from the websocket message
        bytes request = 2;
    }
}

message RoutingInformation {
    // HTTP method from requestor
    Method method = 1;
    // Desired procedure name
    string procedure = 2;
    // Headers won't be automatically translated into the GRPC requests, but they should be delivered in case manual conversion is needed
    map<string, MultiVal> headers = 3;
}

// TODO: work out what we can do here
message StreamedResponse {
    bytes response = 1;
}

// The request data from the HTTP request
message Request {
    // HTTP method from requestor
    Method method = 1;
    // Desired procedure name
    string procedure = 2;
    // JSON payload of the request, if present
    bytes payload = 3;
    // Query params of the request, if present
    map<string, MultiVal> params = 4;
    // Headers won't be automatically translated into the GRPC requests, but they should be delivered in case manual conversion is needed
    map<string, MultiVal> headers = 5;
}

// The response to send to the requestor
message Response {
    // Manually set status code rather than rely on error-handling at the proxy
    uint32 status_code = 1;
    // JSON data to return to the requestor
    bytes payload = 2;
    // Headers won't be automatically returned from GRPC requests, but they should be accepted in case manual conversion is needed
    map<string, MultiVal> write_headers = 6;
}

message MultiVal {
    repeated string values = 1;
}

// All valid HTTP method names
enum Method {
    UNKNOWN = 0;
    GET = 1;
    HEAD = 2;
    POST = 3;
    PUT = 4;
    DELETE = 5;
    CONNECT = 6;
    OPTIONS = 7;
    TRACE = 8;
    PATCH = 9;
}