/**
 * Code generated by protoc-gen-tsjson. DO NOT EDIT.
 * versions:
 * 	protoc-gen-tsjson v0.5.0
 * 	protoc            v3.10.1
 * source: service.proto
 */

import * as tsjson from "@llkennedy/protoc-gen-tsjson";

/** An enum */
export enum FeedType {
	/** An enum value */
	FEED_TYPE_UNKNOWN = 0,
	/** An enum value */
	FEED_TYPE_RED = 1,
	/** An enum value */
	FEED_TYPE_BLUE = 2,
}

/** A message */
export class FeedData extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public id?: string;
	/** A field */
	public dataType?: number;
	/** A field */
	public rawData?: Uint8Array;
	/** A field */
	public type?: FeedType;
	public ToProtoJSON(): Object {
		return {
			id: tsjson.ToProtoJSON.String(this.id),
			dataType: tsjson.ToProtoJSON.StringNumber(this.dataType),
			rawData: tsjson.ToProtoJSON.Bytes(this.rawData),
			type: tsjson.ToProtoJSON.Enum(FeedType, this.type),
		};
	}
	public static async Parse(data: any): Promise<FeedData> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new FeedData();
		res.id = await tsjson.Parse.String(objData, "id", "id");
		res.dataType = await tsjson.Parse.Number(objData, "dataType", "data_type");
		res.rawData = await tsjson.Parse.Bytes(objData, "rawData", "raw_data");
		res.type = await tsjson.Parse.Enum(objData, "type", "type", FeedType);
		return res;
	}
}

/** A message */
export class FeedResponse extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public received?: number;
	public ToProtoJSON(): Object {
		return {
			received: tsjson.ToProtoJSON.Number(this.received),
		};
	}
	public static async Parse(data: any): Promise<FeedResponse> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new FeedResponse();
		res.received = await tsjson.Parse.Number(objData, "received", "received");
		return res;
	}
}

/** A message */
export class BroadcastRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public id?: string;
	public ToProtoJSON(): Object {
		return {
			id: tsjson.ToProtoJSON.String(this.id),
		};
	}
	public static async Parse(data: any): Promise<BroadcastRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new BroadcastRequest();
		res.id = await tsjson.Parse.String(objData, "id", "id");
		return res;
	}
}

/** A message */
export class BroadcastData extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public rawData?: Uint8Array;
	public ToProtoJSON(): Object {
		return {
			rawData: tsjson.ToProtoJSON.Bytes(this.rawData),
		};
	}
	public static async Parse(data: any): Promise<BroadcastData> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new BroadcastData();
		res.rawData = await tsjson.Parse.Bytes(objData, "rawData", "raw_data");
		return res;
	}
}

/** A message */
export class ConvertInput extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public rawData?: Uint8Array;
	public ToProtoJSON(): Object {
		return {
			rawData: tsjson.ToProtoJSON.Bytes(this.rawData),
		};
	}
	public static async Parse(data: any): Promise<ConvertInput> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ConvertInput();
		res.rawData = await tsjson.Parse.Bytes(objData, "rawData", "raw_data");
		return res;
	}
}

/** A message */
export class ConvertOutput extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public convertedData?: string;
	public ToProtoJSON(): Object {
		return {
			convertedData: tsjson.ToProtoJSON.String(this.convertedData),
		};
	}
	public static async Parse(data: any): Promise<ConvertOutput> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ConvertOutput();
		res.convertedData = await tsjson.Parse.String(objData, "convertedData", "converted_data");
		return res;
	}
}

/** A message */
export class FibonacciRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public n?: number;
	public ToProtoJSON(): Object {
		return {
			n: tsjson.ToProtoJSON.StringNumber(this.n),
		};
	}
	public static async Parse(data: any): Promise<FibonacciRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new FibonacciRequest();
		res.n = await tsjson.Parse.Number(objData, "n", "n");
		return res;
	}
}

/** A message */
export class FibonacciResponse extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public number?: number;
	public ToProtoJSON(): Object {
		return {
			number: tsjson.ToProtoJSON.StringNumber(this.number),
		};
	}
	public static async Parse(data: any): Promise<FibonacciResponse> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new FibonacciResponse();
		res.number = await tsjson.Parse.Number(objData, "number", "number");
		return res;
	}
}

/** A message */
export class RandomRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public lowerBound?: number;
	/** A field */
	public upperBound?: number;
	public ToProtoJSON(): Object {
		return {
			lowerBound: tsjson.ToProtoJSON.StringNumber(this.lowerBound),
			upperBound: tsjson.ToProtoJSON.StringNumber(this.upperBound),
		};
	}
	public static async Parse(data: any): Promise<RandomRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new RandomRequest();
		res.lowerBound = await tsjson.Parse.Number(objData, "lowerBound", "lower_bound");
		res.upperBound = await tsjson.Parse.Number(objData, "upperBound", "upper_bound");
		return res;
	}
}

/** A message */
export class RandomResponse extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public number?: number;
	public ToProtoJSON(): Object {
		return {
			number: tsjson.ToProtoJSON.StringNumber(this.number),
		};
	}
	public static async Parse(data: any): Promise<RandomResponse> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new RandomResponse();
		res.number = await tsjson.Parse.Number(objData, "number", "number");
		return res;
	}
}

/** A message */
export class UploadPhotoRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public data?: Uint8Array;
	public ToProtoJSON(): Object {
		return {
			data: tsjson.ToProtoJSON.Bytes(this.data),
		};
	}
	public static async Parse(data: any): Promise<UploadPhotoRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new UploadPhotoRequest();
		res.data = await tsjson.Parse.Bytes(objData, "data", "data");
		return res;
	}
}

/** A message */
export class UploadPhotoResponse extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public uuid?: string;
	public ToProtoJSON(): Object {
		return {
			uuid: tsjson.ToProtoJSON.String(this.uuid),
		};
	}
	public static async Parse(data: any): Promise<UploadPhotoResponse> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new UploadPhotoResponse();
		res.uuid = await tsjson.Parse.String(objData, "uuid", "uuid");
		return res;
	}
}

