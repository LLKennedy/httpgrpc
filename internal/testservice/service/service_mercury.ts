/**
 * Code generated by mercury. DO NOT EDIT.
 * versions:
 * 	mercury v0.9.0
 * 	protoc   v3.10.1
 * source: service.proto
 */

import * as mercury from "@llkennedy/mercury";
import { UploadPhotoRequest as service__UploadPhotoRequest, ConvertOutput as service__ConvertOutput, FeedResponse as service__FeedResponse, BroadcastRequest as service__BroadcastRequest, RandomRequest as service__RandomRequest, BroadcastData as service__BroadcastData, UploadPhotoResponse as service__UploadPhotoResponse, FeedData as service__FeedData, RandomResponse as service__RandomResponse, ConvertInput as service__ConvertInput } from "service";

export class ExposedAppClient extends mercury.Client {
	constructor(basePath: string | undefined = "localhost/api/ExposedApp", useTLS: boolean | undefined = true, client: mercury.AxiosInstance | undefined = undefined) {
		super(basePath, useTLS, client);
	}
	public async Random(req: service__RandomRequest): Promise<service__RandomResponse> {
		return this.SendUnary("Random", mercury.HTTPMethod.GET, req, service__RandomResponse.Parse);
	}
	public async UploadPhoto(req: service__UploadPhotoRequest): Promise<service__UploadPhotoResponse> {
		return this.SendUnary("UploadPhoto", mercury.HTTPMethod.POST, req, service__UploadPhotoResponse.Parse);
	}
	public async Feed(): Promise<mercury.ClientStream<service__FeedData, service__FeedResponse>> {
		return this.StartClientStream<service__FeedData, service__FeedResponse>("Feed", service__FeedResponse.Parse);
	}
	public async Broadcast(req: service__BroadcastRequest): Promise<mercury.ServerStream<service__BroadcastRequest, service__BroadcastData>> {
		return this.StartServerStream<service__BroadcastRequest, service__BroadcastData>("Broadcast", req, service__BroadcastData.Parse);
	}
	public async ConvertToString(): Promise<mercury.DualStream<service__ConvertInput, service__ConvertOutput>> {
		return this.StartDualStream<service__ConvertInput, service__ConvertOutput>("ConvertToString", service__ConvertOutput.Parse);
	}
}
