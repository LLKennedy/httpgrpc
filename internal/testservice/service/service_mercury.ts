/**
 * Code generated by mercury. DO NOT EDIT.
 * versions:
 * 	mercury v0.8.0
 * 	protoc   v3.10.1
 * source: service.proto
 */

import * as mercury from "@llkennedy/mercury";
import { RandomRequest, RandomResponse, UploadPhotoRequest, UploadPhotoResponse, FeedData, FeedResponse, BroadcastRequest, BroadcastData, ConvertInput, ConvertOutput } from "service";

export class ExposedAppClient extends mercury.Client {
	constructor(basePath: string | undefined = "localhost/api", useTLS: boolean | undefined = true, client: mercury.AxiosInstance | undefined = undefined) {
		super(basePath, useTLS, client);
	}
	public async Random(req: RandomRequest): Promise<RandomResponse> {
		return this.SendUnary("Random", mercury.HTTPMethod.GET, req, RandomResponse.Parse);
	}
	public async UploadPhoto(req: UploadPhotoRequest): Promise<UploadPhotoResponse> {
		return this.SendUnary("UploadPhoto", mercury.HTTPMethod.POST, req, UploadPhotoResponse.Parse);
	}
	public async Feed(): Promise<mercury.ClientStream<FeedData, FeedResponse>> {
		return this.StartClientStream<FeedData, FeedResponse>("Feed", FeedResponse.Parse);
	}
	public async Broadcast(req: BroadcastRequest): Promise<mercury.ServerStream<BroadcastRequest, BroadcastData>> {
		return this.StartServerStream<BroadcastRequest, BroadcastData>("Broadcast", req, BroadcastData.Parse);
	}
	public async ConvertToString(): Promise<mercury.DualStream<ConvertInput, ConvertOutput>> {
		return this.StartDualStream<ConvertInput, ConvertOutput>("ConvertToString", ConvertOutput.Parse);
	}
}